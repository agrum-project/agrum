#labels Featured
AGrUM (ACSL Generator from UML Model) is an Eclipse plug-in prototype which purpose is to offer a way to use formal methods without knowing them. It takes advantage of the modelling to automatically generate annotations on the code. These annotations can then be proved by static analysis tool to ensure the conformity of the code to the design model.

=The modelling=

The Unified Modeling Language (UML) is widespread and it is currently used in industry development teams. We propose to use a particular subset of UML based on the subset defined in http://www.erts2012.org/site/0p2ruc89/7b-3.pdf for the specification of embedded software. The subset we are interested in deals with the behavioural representation of software, realized through UML state machine diagram. We define a first subset to conduct our work, limited to very simple concepts (for instance, no state hierarchy, no effects on transition, etc). In addition, we consider these state machines are meant to be driven by a clock and to do a certain number of actions at each clock tick. In this way, we limited the possible events handled by the state machine to the completion event (no event) and to the clock tick.

=The implementation=

The C implementation of a state machine is realized using our owned pattern. We created a transition function for each possible event of the state and one action function to choose the action to run according to the current event. The complete pattern will be detailed sooner.


=The generated annotations=

The proof properties are generated as annotations in ANSI/ISO C Specification Language (ACSL). ACSL is a specification language to express behavioural properties on C code. It is based on first order logic and allows specifying function contracts, invariants, variants, etc. ACSL annotations are represented as comments in C code, using specific tags and they are without side effects on the program. More information can be found at: http://frama-c.com/acsl.html

The ACSL annotations generated by AGrUM represent the behaviour described in the state machine. They are defined as function contracts on the functions of program. Currently, AGrUM only annotates the transition functions.

=The static analysis tool=

The annotated c file (implementation + annotations) can be verified using Frama-C framework (http://frama-c.com/). Frama-C is an open-source modular environment dedicated to the static analysis of C programs. It relies on different static analysis techniques available through plug-ins and linked solvers. The version to use is the latest one, Fluorine.